description: 
globs: 
alwaysApply: true
---
# guide for hughes

看一遍我hughes的page，里面是和我的json连接到一起的。我平时会把日记写到obsidian里，然后传送到我自己private的github  
repo里，路径大概为https://github.com/yanfd/Obsidian-Archive/blob/main/yan/record/2025-8.md?plain=1

其中

内容举例如下，可以看到我的markdown文件以"####"的四级标题分隔了每天的日志。我需要你获取到所有record路由下xxxx(year)-xx(month).md的
文档内容然后进行查看并摘取每日的情况。最后放到emssages.json里面，分一下年月日然后用hughes展示。

> [!NOTE]
>
still thinkin
要做的事
~~decipher展示~~
~~stats雨天~~
~~给hughes新页面做一个雨天的效果~~
新展示页面推特
需要做和周博文说的那个SVG动画
把这个log和hughes json想办法做一下绑定

#### 2025-08-17
18:30到达麦麦
19:00看会儿电视剧
21:00 卧槽
视频传给涛哥（搜索检索的）

#### 2025-08-16
西湖的柔波...

#### 2025-08-02
hey there.

---

## 实现方案

### 架构设计
使用FastAPI后端 + Next.js前端的分离架构：
- **后端**：FastAPI负责GitHub API调用、Markdown解析、数据处理
- **前端**：Next.js负责展示和用户交互

### 后端实现

#### 1. Hughes工具模块 (`/project2/nextjs_fastapi/hughes_utils.py`)
- **HughesSync类**：核心同步逻辑
  - `fetch_markdown_files()`: 通过GitHub API获取record目录下的所有Markdown文件
  - `parse_markdown_entries()`: 解析Markdown内容，按`####`分割日志
  - `sync_all_entries()`: 同步所有日志条目

#### 2. API路由 (`/project2/nextjs_fastapi/routes/hughes_routes.py`)
- **GET /api/hughes/sync**: 从GitHub同步最新数据
- **GET /api/hughes/messages**: 获取所有日志消息
- **GET /api/hughes/messages/{year}/{month}**: 获取指定年月的日志
- **GET /api/hughes/messages/recent**: 获取最近N条日志
- **GET /api/hughes/messages/grouped**: 按年月分组返回消息
- **GET /api/hughes/status**: 获取同步状态

### 前端实现

#### Hughes页面更新 (`/project2/nextjs_testing/src/app/hughes/page.tsx`)
- 从FastAPI端点获取数据
- 支持两种视图模式：列表视图和按月分组视图
- 添加同步按钮，可手动触发GitHub同步
- 错误处理和降级策略（API不可用时读取本地JSON）
- 显示最后同步时间

### 配置说明

#### GitHub Token配置
在FastAPI服务器设置环境变量：
```bash
export GITHUB_TOKEN=your_github_personal_access_token
# 或
export HUGHES_GITHUB_TOKEN=your_github_personal_access_token
```

#### 依赖安装
```bash
cd /project2/nextjs_fastapi
pip install -r requirements.txt  # 已添加requests库
```

#### 启动服务
1. 启动FastAPI后端：
```bash
cd /project2/nextjs_fastapi
python main.py
```

2. 启动Next.js前端：
```bash
cd /project2/nextjs_testing
npm run dev
```

### 数据格式
解析后的日志格式：
```json
{
  "id": 1,
  "date": "17 Aug.",
  "title": "从内容提取或默认标题",
  "content": "日志内容",
  "timestamp": "2025-08-17",
  "year": 2025,
  "month": 8,
  "day": 17
}
```

### 特性
- 自动解析`YYYY-M.md`格式的文件名
- 智能提取标题（从内容首行或使用日期）
- 支持缓存机制，减少API调用
- 按年月分组展示
- 保持原有的手风琴UI效果


### 不要动这里

  部署步骤

  1. 首次服务器设置

  # SSH到你的服务器
  ssh user@your-server

  # 下载并运行初始化脚本
  curl -O https://raw.githubusercontent.com/你的仓库/main/p
  roject2/nextjs_fastapi/deploy/server-setup.sh
  bash server-setup.sh

  2. 配置GitHub Secrets

  在GitHub仓库设置中添加：
  - SERVER_HOST: 你的服务器IP
  - SERVER_USER: SSH用户名
  - SERVER_PORT: 22
  - SERVER_SSH_KEY: SSH私钥
  - HUGHES_GITHUB_TOKEN: 访问Obsidian仓库的token

  3. 配置Vercel环境变量

  在Vercel项目设置中添加：
  NEXT_PUBLIC_API_URL=https://你的服务器:8000

  4. 自动部署

  每次push到main分支，GitHub Actions会自动：
  - SSH到服务器
  - 拉取最新代码
  - 安装依赖
  - 重启服务

  这样你的FastAPI就能持续运行，提供稳定的API服务了！